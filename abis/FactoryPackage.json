{
  "address": "0xF8E56b3578a274e4a1dF0FF9664f668F5728dCD8",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeGreaterThan100",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameVaultPackage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "feeBPS",
          "type": "uint16"
        }
      ],
      "name": "FeeConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "profitMaxUnlockTime",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "VaultDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultPackage",
          "type": "address"
        }
      ],
      "name": "VaultPackageUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_profitMaxUnlockTime",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_assetType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_accountant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "deployVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBPS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "getVaultCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultPackage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_feeBPS",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_feeBPS",
          "type": "uint16"
        }
      ],
      "name": "updateFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultPackage",
          "type": "address"
        }
      ],
      "name": "updateVaultPackage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultCreators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPackage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6bc5000d74d1b0cea14549b4f4b6d9064e854af70e4950ad05cc8ff3cbecbd8",
  "receipt": {
    "to": null,
    "from": "0x594D425a6C9249F66a00C841A7a2A921b63a0a4C",
    "contractAddress": "0xF8E56b3578a274e4a1dF0FF9664f668F5728dCD8",
    "transactionIndex": 9,
    "gasUsed": "2823889",
    "logsBloom": "0x
    "blockHash": "0x858e3fd8977ca612c3cee691bbca2c2156e26c8e1b8c73368979b858622fa766",
    "transactionHash": "0xb6bc5000d74d1b0cea14549b4f4b6d9064e854af70e4950ad05cc8ff3cbecbd8",
    "logs": [],
    "blockNumber": 72771145,
    "cumulativeGasUsed": "45250823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7419bef3f7b79b6be045b705fb06756",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeGreaterThan100\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameVaultPackage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feeBPS\",\"type\":\"uint16\"}],\"name\":\"FeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"profitMaxUnlockTime\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"VaultDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultPackage\",\"type\":\"address\"}],\"name\":\"VaultPackageUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_profitMaxUnlockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_assetType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_accountant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deployVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultPackage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_feeBPS\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_feeBPS\",\"type\":\"uint16\"}],\"name\":\"updateFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultPackage\",\"type\":\"address\"}],\"name\":\"updateVaultPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultCreators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPackage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialized()\":{\"notice\":\"Initialized state of the factory.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factory/packages/FactoryPackage.sol\":\"FactoryPackage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IUpgradeable {\\n    function setImplementation(address implementation, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xfb6e3562495bd435fb0ea35c076f0fd864b9bab5c9b5f3fc89609f79765ee1ea\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/factory/FactoryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nerror AlreadyInitialized();\\nerror ZeroAddress();\\nerror FeeGreaterThan100();\\nerror SameVaultPackage();\\n\",\"keccak256\":\"0x87a16847d4ab49aadbdbb74c025be48bd367de103e9e0db7c3316470b5bdeb65\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/factory/FactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract FactoryStorage is AccessControl {\\n    uint16 public constant MAX_BPS = 10000;\\n\\n    uint16 public feeBPS;\\n    address public feeRecipient;\\n    address public vaultPackage;\\n    address[] public vaults;\\n    mapping(address => address) public vaultCreators;\\n\\n    /// @notice Initialized state of the factory.\\n    bool public initialized;\\n}\\n\",\"keccak256\":\"0x0de62aa950b35501c77aaef0e1f76bc7cdf59b35d7bffa7da5cc1510f54cd91a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/factory/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IFactory {\\n    function updateVaultPackage(address _vaultPackage) external;\\n\\n    function updateFeeConfig(address _feeRecipient, uint16 _feeBPS) external;\\n\\n    function deployVault(\\n        uint32 _profitMaxUnlockTime,\\n        uint256 _assetType,\\n        address _asset,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _accountant,\\n        address _admin\\n    ) external returns (address);\\n\\n    function getVaults() external view returns (address[] memory);\\n\\n    function getVaultCreator(address _vault) external view returns (address);\\n\\n    function protocolFeeConfig() external view returns (uint16 /*feeBps*/, address /*feeRecipient*/);\\n}\\n\",\"keccak256\":\"0xb69f3d45a3be0a5d799a643f41d585dde0ea2637c1b2875f04a2f2100f29bbb7\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/factory/interfaces/IFactoryEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IFactoryEvents {\\n    event VaultPackageUpdated(address indexed vaultPackage);\\n    event FeeConfigUpdated(address indexed feeRecipient, uint16 feeBPS);\\n    event VaultDeployed(\\n        address indexed vault,\\n        uint32 profitMaxUnlockTime,\\n        address indexed asset,\\n        string name,\\n        string symbol,\\n        address indexed accountant,\\n        address admin\\n    );\\n}\\n\",\"keccak256\":\"0xa7672d0f10fe15b9d3fb025f2d426f2e44c3c1bcd9c86e46dc633b22c6907fdb\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/factory/interfaces/IFactoryInit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IFactoryInit {\\n    function initialize(address _vaultPackage, address _feeRecipient, uint16 _feeBPS) external;\\n}\\n\",\"keccak256\":\"0x387b951b4f5d9884b16230d70f370220c4f7fa8ab3a6c1c54f6f4e58752de92a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/factory/packages/FactoryPackage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IFactory.sol\\\";\\nimport \\\"../interfaces/IFactoryInit.sol\\\";\\nimport \\\"../interfaces/IFactoryEvents.sol\\\";\\nimport \\\"../FactoryStorage.sol\\\";\\nimport \\\"../FactoryErrors.sol\\\";\\nimport \\\"../../vault/interfaces/IVaultInit.sol\\\";\\nimport \\\"../../vault/FathomVault.sol\\\";\\n\\ncontract FactoryPackage is FactoryStorage, IFactory, IFactoryInit, IFactoryEvents {\\n    function initialize(address _vaultPackage, address _feeRecipient, uint16 _feeBPS) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (initialized == true) {\\n            revert AlreadyInitialized();\\n        }\\n        if (_vaultPackage == address(0) || _feeRecipient == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (_feeBPS > MAX_BPS) {\\n            revert FeeGreaterThan100();\\n        }\\n        vaultPackage = _vaultPackage;\\n        feeRecipient = _feeRecipient;\\n        feeBPS = _feeBPS;\\n\\n        emit VaultPackageUpdated(_vaultPackage);\\n        emit FeeConfigUpdated(_feeRecipient, _feeBPS);\\n\\n        initialized = true;\\n    }\\n\\n    function updateVaultPackage(address _vaultPackage) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_vaultPackage == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (vaultPackage == _vaultPackage) {\\n            revert SameVaultPackage();\\n        }\\n        vaultPackage = _vaultPackage;\\n        emit VaultPackageUpdated(_vaultPackage);\\n    }\\n\\n    function updateFeeConfig(address _feeRecipient, uint16 _feeBPS) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_feeRecipient == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (_feeBPS > MAX_BPS) {\\n            revert FeeGreaterThan100();\\n        }\\n        feeRecipient = _feeRecipient;\\n        feeBPS = _feeBPS;\\n        emit FeeConfigUpdated(_feeRecipient, _feeBPS);\\n    }\\n\\n    function deployVault(\\n        uint32 _profitMaxUnlockTime,\\n        uint256 _assetType,\\n        address _asset,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _accountant,\\n        address _admin\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) returns (address) {\\n        FathomVault vault = new FathomVault(vaultPackage, new bytes(0));\\n        IVaultInit(address(vault)).initialize(_profitMaxUnlockTime, _assetType, _asset, _name, _symbol, _accountant, _admin);\\n\\n        vaults.push(address(vault));\\n        vaultCreators[address(vault)] = msg.sender;\\n        emit VaultDeployed(address(vault), _profitMaxUnlockTime, _asset, _name, _symbol, _accountant, _admin);\\n        return address(vault);\\n    }\\n\\n    function getVaults() external view override returns (address[] memory) {\\n        return vaults;\\n    }\\n\\n    function getVaultCreator(address _vault) external view override returns (address) {\\n        return vaultCreators[_vault];\\n    }\\n\\n    function protocolFeeConfig() external view override returns (uint16 /*feeBps*/, address /*feeRecipient*/) {\\n        return (feeBPS, feeRecipient);\\n    }\\n}\\n\",\"keccak256\":\"0xa6b1bc8f9e0bd21897c8e406f7b46f975468edf3d5419586d58838250ffad4cc\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/vault/FathomVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./VaultStorage.sol\\\";\\nimport \\\"../common/interfaces/IUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/// @title Fathom Vault\\n/// @notice The Fathom Vault is designed as a non-opinionated system to distribute funds of\\n/// depositors for a specific `asset` into different opportunities (aka Strategies)\\n/// and manage accounting in a robust way.\\ncontract FathomVault is Proxy, ERC1967Upgrade, IUpgradeable, VaultStorage {\\n    /// @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n    ///\\n    /// If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n    /// encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - If `data` is empty, `msg.value` must be zero.\\n    constructor(address implementation, bytes memory _data) payable {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _upgradeToAndCall(implementation, _data, false);\\n    }\\n\\n    function setImplementation(address implementation, bytes calldata _data) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _upgradeToAndCall(implementation, _data, false);\\n    }\\n\\n    /// @dev Returns the current implementation address.\\n    ///\\n    /// TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n    /// the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n    /// `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x07dda41c583fa5648cda86069b5219ad4fceb90133b92e1aba16620284381512\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./VaultStructs.sol\\\";\\n\\ncontract VaultStorage is AccessControl, ReentrancyGuard {\\n    /// @notice The max length the withdrawal queue can be.\\n    uint256 public constant MAX_QUEUE = 10;\\n    /// @notice 100% in Basis Points.\\n    uint256 public constant MAX_BPS = 10000;\\n    /// @notice Extended for profit locking calculations.\\n    uint256 public constant MAX_BPS_EXTENDED = 1_000_000_000_000;\\n    /// @notice One year constant for calculating the profit unlocking rate.\\n    uint256 public constant ONE_YEAR = 31_556_952;\\n\\n    /// @notice Roles\\n    bytes32 public constant STRATEGY_MANAGER = keccak256(\\\"STRATEGY_MANAGER\\\");\\n    bytes32 public constant REPORTING_MANAGER = keccak256(\\\"REPORTING_MANAGER\\\");\\n    bytes32 public constant DEBT_PURCHASER = keccak256(\\\"DEBT_PURCHASER\\\");\\n\\n    /// @notice EIP-2612 permit() typehashes\\n    bytes32 public constant DOMAIN_TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public constant PERMIT_TYPE_HASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Total amount of shares that are currently minted including those locked.\\n    /// NOTE: To get the ERC20 compliant version use totalSupply().\\n    uint256 public totalSupplyAmount;\\n\\n    /// @notice Total amount of assets that has been deposited in strategies.\\n    uint256 public totalDebt;\\n    /// @notice Current assets held in the vault contract. Replacing balanceOf(this) to avoid pricePerShare manipulation.\\n    uint256 public totalIdle;\\n    /// @notice Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems.\\n    uint256 public minimumTotalIdle;\\n    /// @notice Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert.\\n    uint256 public depositLimit;\\n\\n    /// @notice The amount of time profits will unlock over.\\n    uint256 public profitMaxUnlockTime;\\n    /// @notice The timestamp of when the current unlocking period ends.\\n    uint256 public fullProfitUnlockDate;\\n    /// @notice The per second rate at which profit will unlock.\\n    uint256 public profitUnlockingRate;\\n    /// @notice Last timestamp of the most recent profitable report.\\n    uint256 public lastProfitUpdate;\\n/// @notice The type of asset the vault accepts.\\n    uint256 public assetType;\\n\\n    /// @notice Contract that charges fees and can give refunds.\\n    address public accountant;\\n    /// @notice Contract to control the deposit limit.\\n    address public depositLimitModule;\\n    /// @notice Contract to control the withdraw limit.\\n    address public withdrawLimitModule;\\n\\n    /// @notice Factory address\\n    address public factory;\\n\\n    /// @notice Address of the underlying token used by the vault\\n    ERC20 internal assetContract;\\n\\n    /// @notice Should the vault use the default_queue regardless whats passed in.\\n    bool public useDefaultQueue;\\n\\n    /// @notice State of the vault - if set to true, only withdrawals will be available. It can't be reverted.\\n    bool public shutdown;\\n\\n    /// @notice Initialized state of the vault.\\n    bool public initialized;\\n\\n    /// @notice The current decimals value of the vault.\\n    uint8 internal decimalsValue;\\n\\n    /// @notice ERC20 - name of the vault's token\\n    string internal sharesName;\\n    /// @notice ERC20 - symbol of the vault's token\\n    string internal sharesSymbol;\\n\\n    /// @notice The current default withdrawal queue.\\n    address[] public defaultQueue;\\n\\n    /// @notice HashMap that records all the strategies that are allowed to receive assets from the vault.\\n    mapping(address => StrategyParams) public strategies;\\n\\n    /// @notice ERC20 - amount of shares per account\\n    mapping(address => uint256) internal sharesBalanceOf;\\n    /// @notice ERC20 - owner -> (spender -> amount)\\n    mapping(address => mapping(address => uint256)) internal sharesAllowance;\\n\\n    /// @notice EIP-2612 permit() nonces\\n    mapping(address => uint256) public nonces;\\n}\\n\",\"keccak256\":\"0xbb783670f30f4196ef0202b49a41e9f1dac15e65bea9de90c4904556c2d6ada3\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/vault/VaultStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 lastReport;\\n    uint256 currentDebt;\\n    uint256 maxDebt;\\n}\\n\\nstruct FeeAssessment {\\n    uint256 totalFees;\\n    uint256 totalRefunds;\\n    uint256 protocolFees;\\n    address protocolFeeRecipient;\\n}\\n\\nstruct ShareManagement {\\n    uint256 sharesToBurn;\\n    uint256 accountantFeesShares;\\n    uint256 protocolFeesShares;\\n}\\n\\nstruct WithdrawalState {\\n    uint256 requestedAssets;\\n    uint256 currTotalIdle;\\n    uint256 currTotalDebt;\\n    uint256 assetsNeeded;\\n    uint256 previousBalance;\\n    uint256 unrealisedLossesShare;\\n}\\n\\nenum StrategyChangeType {\\n    ADDED, // Corresponds to the strategy being added.\\n    REVOKED // Corresponds to the strategy being revoked.\\n}\\n\\nenum RoleStatusChange {\\n    OPENED, // Corresponds to a role being opened.\\n    CLOSED // Corresponds to a role being closed.\\n}\\n\\nenum Rounding {\\n    ROUND_DOWN, // Corresponds to rounding down to the nearest whole number.\\n    ROUND_UP // Corresponds to rounding up to the nearest whole number.\\n}\\n\",\"keccak256\":\"0x7e35a13e971bc0eb6983be78142f2198a5ab247063270b09b3d36c8289aa86e0\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/vault/interfaces/IVaultInit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IVaultInit {\\n    function initialize(\\n        uint256 _profitMaxUnlockTime,\\n        uint256 _assetType,\\n        address _asset,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _accountant,\\n        address _admin\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcbea41ec17cf2ead5d0ff5ea908d1cea0b745c5a40fb1b02d0a5e1d7ee5b4863\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128dd806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200011e5760003560e01c806301ffc9a7146200012357806307d3277f146200014f578063158ef93e14620001795780631a1c6e5314620001875780631c0bdcfe14620001aa5780631f65940f14620001ef5780632369cfd6146200021e578063248a9ca314620002375780632f2ff15d146200025d57806336568abe146200027457806344d00f82146200028b5780634690484014620002a45780637ebef52914620002be5780638c64ea4a14620002d557806391d1485414620002ec578063a217fddf1462000303578063c5548074146200030c578063cee0c7ca1462000323578063d547741f1462000337578063ddce2acc146200034e578063fd967f471462000365575b600080fd5b6200013a6200013436600462000cf7565b6200036f565b60405190151581526020015b60405180910390f35b6001546040805161ffff83168152620100009092046001600160a01b031660208301520162000146565b6005546200013a9060ff1681565b600154620001969061ffff1681565b60405161ffff909116815260200162000146565b620001d6620001bb36600462000d40565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200162000146565b620001d66200020036600462000d40565b6001600160a01b039081166000908152600460205260409020541690565b620002356200022f36600462000d40565b620003a7565b005b6200024e6200024836600462000d5e565b62000445565b60405190815260200162000146565b620002356200026e36600462000d78565b6200045a565b620002356200028536600462000d78565b62000481565b6200029562000507565b60405162000146919062000da7565b600154620001d6906201000090046001600160a01b031681565b62000235620002cf36600462000e09565b6200056b565b620001d6620002e636600462000d5e565b620006ab565b6200013a620002fd36600462000d78565b620006d6565b6200024e600081565b620002356200031d36600462000e53565b620006ff565b600254620001d6906001600160a01b031681565b620002356200034836600462000d78565b620007b7565b620001d66200035f36600462000ecd565b620007d9565b6200019661271081565b60006001600160e01b03198216637965db0b60e01b1480620003a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000620003b481620009b3565b6001600160a01b038216620003dc5760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b038084169116036200040b576040516335db9d3d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384169081179091556040516000805160206200286883398151915290600090a25050565b60009081526020819052604090206001015490565b620004658262000445565b6200047081620009b3565b6200047c8383620009c2565b505050565b6001600160a01b0381163314620004f75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b62000503828262000a4a565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200056157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000542575b5050505050905090565b60006200057881620009b3565b60055460ff161515600103620005a05760405162dc149f60e41b815260040160405180910390fd5b6001600160a01b0384161580620005be57506001600160a01b038316155b15620005dd5760405163d92e233d60e01b815260040160405180910390fd5b61271061ffff831611156200060557604051637a50132760e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b03868116918217909255600180546001600160b01b031916620100009387169390930261ffff19169290921761ffff8516179091556040516000805160206200286883398151915290600090a260405161ffff831681526001600160a01b03841690600080516020620028888339815191529060200160405180910390a250506005805460ff191660011790555050565b60038181548110620006bc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006200070c81620009b3565b6001600160a01b038316620007345760405163d92e233d60e01b815260040160405180910390fd5b61271061ffff831611156200075c57604051637a50132760e11b815260040160405180910390fd5b600180546001600160b01b031916620100006001600160a01b03861690810261ffff19169190911761ffff851690811790925560405191825290600080516020620028888339815191529060200160405180910390a2505050565b620007c28262000445565b620007cd81620009b3565b6200047c838362000a4a565b600080620007e781620009b3565b6002546040805160008082526020820192839052926001600160a01b031691620008119062000ce9565b6200081e9291906200100a565b604051809103906000f0801580156200083b573d6000803e3d6000fd5b5060405162c981f560e11b81529091506001600160a01b0382169063019303ea906200087c908f908f908f908f908f908f908f908f908f9060040162001061565b600060405180830381600087803b1580156200089757600080fd5b505af1158015620008ac573d6000803e3d6000fd5b505050506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055503360046000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846001600160a01b03168a6001600160a01b0316826001600160a01b03167f86b4fabe6653dc170f81aafb968bb2c0c841411b628f39a0987776d445bc2cd48f8d8d8d8d8c6040516200099c96959493929190620010cc565b60405180910390a49b9a5050505050505050505050565b620009bf813362000ab2565b50565b620009ce8282620006d6565b62000503576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000a063390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62000a568282620006d6565b1562000503576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b62000abe8282620006d6565b620005035762000ace8162000b16565b62000adb83602062000b29565b60405160200162000aee9291906200111f565b60408051601f198184030181529082905262461bcd60e51b8252620004ee9160040162001192565b6060620003a16001600160a01b03831660145b6060600062000b3a836002620011bd565b62000b47906002620011d7565b6001600160401b0381111562000b615762000b6162000fa0565b6040519080825280601f01601f19166020018201604052801562000b8c576020820181803683370190505b509050600360fc1b8160008151811062000baa5762000baa620011ed565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000bdc5762000bdc620011ed565b60200101906001600160f81b031916908160001a905350600062000c02846002620011bd565b62000c0f906001620011d7565b90505b600181111562000c91576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000c475762000c47620011ed565b1a60f81b82828151811062000c605762000c60620011ed565b60200101906001600160f81b031916908160001a90535060049490941c9362000c898162001203565b905062000c12565b50831562000ce25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620004ee565b9392505050565b61164a806200121e83390190565b60006020828403121562000d0a57600080fd5b81356001600160e01b03198116811462000ce257600080fd5b80356001600160a01b038116811462000d3b57600080fd5b919050565b60006020828403121562000d5357600080fd5b62000ce28262000d23565b60006020828403121562000d7157600080fd5b5035919050565b6000806040838503121562000d8c57600080fd5b8235915062000d9e6020840162000d23565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101562000dea5783516001600160a01b03168352928401929184019160010162000dc3565b50909695505050505050565b803561ffff8116811462000d3b57600080fd5b60008060006060848603121562000e1f57600080fd5b62000e2a8462000d23565b925062000e3a6020850162000d23565b915062000e4a6040850162000df6565b90509250925092565b6000806040838503121562000e6757600080fd5b62000e728362000d23565b915062000d9e6020840162000df6565b60008083601f84011262000e9557600080fd5b5081356001600160401b0381111562000ead57600080fd5b60208301915083602082850101111562000ec657600080fd5b9250929050565b600080600080600080600080600060e08a8c03121562000eec57600080fd5b893563ffffffff8116811462000f0157600080fd5b985060208a0135975062000f1860408b0162000d23565b965060608a01356001600160401b038082111562000f3557600080fd5b62000f438d838e0162000e82565b909850965060808c013591508082111562000f5d57600080fd5b5062000f6c8c828d0162000e82565b909550935062000f81905060a08b0162000d23565b915062000f9160c08b0162000d23565b90509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000fd357818101518382015260200162000fb9565b50506000910152565b6000815180845262000ff681602086016020860162000fb6565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090620010309083018462000fdc565b949350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b63ffffffff8a168152886020820152600060018060a01b03808a16604084015260e060608401526200109860e08401898b62001038565b8381036080850152620010ad81888a62001038565b95821660a0850152509290921660c09091015250979650505050505050565b63ffffffff87168152608060208201526000620010ee60808301878962001038565b82810360408401526200110381868862001038565b91505060018060a01b0383166060830152979650505050505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516200115381601785016020880162000fb6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200118681602884016020880162000fb6565b01602801949350505050565b60208152600062000ce2602083018462000fdc565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620003a157620003a1620011a7565b80820180821115620003a157620003a1620011a7565b634e487b7160e01b600052603260045260246000fd5b600081620012155762001215620011a7565b50600019019056fe60806040526040516200164a3803806200164a8339810160408190526200002691620003b5565b60018055620000376000336200004d565b6200004582826000620000ee565b5050620004e3565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000ea576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000a93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b620000f98362000120565b600082511180620001075750805b156200011b5762000119838362000162565b505b505050565b6200012b8162000191565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200018a8383604051806060016040528060278152602001620016236027913962000245565b9392505050565b6001600160a01b0381163b620002045760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080856001600160a01b03168560405162000264919062000490565b600060405180830381855af49150503d8060008114620002a1576040519150601f19603f3d011682016040523d82523d6000602084013e620002a6565b606091505b509092509050620002ba86838387620002c4565b9695505050505050565b606083156200033857825160000362000330576001600160a01b0385163b620003305760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620001fb565b508162000344565b6200034483836200034c565b949350505050565b8151156200035d5781518083602001fd5b8060405162461bcd60e51b8152600401620001fb9190620004ae565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003ac57818101518382015260200162000392565b50506000910152565b60008060408385031215620003c957600080fd5b82516001600160a01b0381168114620003e157600080fd5b60208401519092506001600160401b0380821115620003ff57600080fd5b818501915085601f8301126200041457600080fd5b81518181111562000429576200042962000379565b604051601f8201601f19908116603f0116810190838211818310171562000454576200045462000379565b816040528281528860208487010111156200046e57600080fd5b620004818360208301602088016200038f565b80955050505050509250929050565b60008251620004a48184602087016200038f565b9190910192915050565b6020815260008251806020840152620004cf8160408501602087016200038f565b601f01601f19169190910160400192915050565b61113080620004f36000396000f3fe6080604052600436106101ae5760003560e01c806301ffc9a7146101c557806303dcd12c146101fa5780630835a3fc1461023c5780630952864e14610252578063158ef93e1461026857806316d3bfbb14610289578063248a9ca3146102a15780632d632692146102c15780632f2ff15d146102d757806336568abe146102f757806336fba0841461031757806339ebf823146103305780633f7b5e40146103925780633fe3347a146103a75780634d4bb197146103bd5780634fb3ccc5146103f15780635141eebb146104295780637ecebe001461043f5780638afca8f01461046c578063919860031461048257806391d14854146104a25780639aa7df94146104c25780639e34e348146104d85780639fc2c476146104f8578063a217fddf1461052c578063ab5b4d4914610541578063bbe4eb4914610575578063c0993eea14610596578063c45a0155146105ca578063c6d93f4a146105ea578063d547741f1461060a578063ecf708581461062a578063f828f50b14610640578063fc0e74d114610656578063fc7b9c1814610677578063fd967f471461068d578063ff1e7f08146106a3576101bd565b366101bd576101bb6106c3565b005b6101bb6106c3565b3480156101d157600080fd5b506101e56101e0366004610e26565b6106d5565b60405190151581526020015b60405180910390f35b34801561020657600080fd5b5061022e7f633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab81565b6040519081526020016101f1565b34801561024857600080fd5b5061022e60055481565b34801561025e57600080fd5b5061022e60075481565b34801561027457600080fd5b506010546101e590600160b01b900460ff1681565b34801561029557600080fd5b5061022e6301e1855881565b3480156102ad57600080fd5b5061022e6102bc366004610e50565b61070c565b3480156102cd57600080fd5b5061022e60085481565b3480156102e357600080fd5b506101bb6102f2366004610e85565b610721565b34801561030357600080fd5b506101bb610312366004610e85565b610742565b34801561032357600080fd5b5061022e64e8d4a5100081565b34801561033c57600080fd5b5061037261034b366004610eb1565b60146020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016101f1565b34801561039e57600080fd5b5061022e600a81565b3480156103b357600080fd5b5061022e600b5481565b3480156103c957600080fd5b5061022e7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b3480156103fd57600080fd5b50600c54610411906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b34801561043557600080fd5b5061022e60095481565b34801561044b57600080fd5b5061022e61045a366004610eb1565b60176020526000908152604090205481565b34801561047857600080fd5b5061022e600a5481565b34801561048e57600080fd5b50600e54610411906001600160a01b031681565b3480156104ae57600080fd5b506101e56104bd366004610e85565b6107c5565b3480156104ce57600080fd5b5061022e60045481565b3480156104e457600080fd5b50600d54610411906001600160a01b031681565b34801561050457600080fd5b5061022e7f1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae81565b34801561053857600080fd5b5061022e600081565b34801561054d57600080fd5b5061022e7f900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db2135737581565b34801561058157600080fd5b506010546101e590600160a01b900460ff1681565b3480156105a257600080fd5b5061022e7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b3480156105d657600080fd5b50600f54610411906001600160a01b031681565b3480156105f657600080fd5b506101bb610605366004610ecc565b6107ee565b34801561061657600080fd5b506101bb610625366004610e85565b61083f565b34801561063657600080fd5b5061022e60065481565b34801561064c57600080fd5b5061022e60025481565b34801561066257600080fd5b506010546101e590600160a81b900460ff1681565b34801561068357600080fd5b5061022e60035481565b34801561069957600080fd5b5061022e61271081565b3480156106af57600080fd5b506104116106be366004610e50565b61085b565b6106d36106ce610885565b6108ab565b565b60006001600160e01b03198216637965db0b60e01b148061070657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526020819052604090206001015490565b61072a8261070c565b610733816108cf565b61073d83836108dc565b505050565b6001600160a01b03811633146107b75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107c18282610960565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107f9816108cf565b6108398484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506109c5915050565b50505050565b6108488261070c565b610851816108cf565b61073d8383610960565b6013818154811061086b57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006108a66000805160206110b4833981519152546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156108ca573d6000f35b3d6000fd5b6108d981336109ea565b50565b6108e682826107c5565b6107c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561091c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61096a82826107c5565b156107c1576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6109ce83610a43565b6000825111806109db5750805b1561073d576108398383610a83565b6109f482826107c5565b6107c157610a0181610aaf565b610a0c836020610ac1565b604051602001610a1d929190610f72565b60408051601f198184030181529082905262461bcd60e51b82526107ae91600401610fe1565b610a4c81610c5c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610aa883836040518060600160405280602781526020016110d460279139610cf6565b9392505050565b60606107066001600160a01b03831660145b60606000610ad083600261102a565b610adb906002611041565b6001600160401b03811115610af257610af2611054565b6040519080825280601f01601f191660200182016040528015610b1c576020820181803683370190505b509050600360fc1b81600081518110610b3757610b3761106a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b6657610b6661106a565b60200101906001600160f81b031916908160001a9053506000610b8a84600261102a565b610b95906001611041565b90505b6001811115610c0d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610bc957610bc961106a565b1a60f81b828281518110610bdf57610bdf61106a565b60200101906001600160f81b031916908160001a90535060049490941c93610c0681611080565b9050610b98565b508315610aa85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ae565b610c6581610d6e565b610cc75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107ae565b6000805160206110b483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080856001600160a01b031685604051610d139190611097565b600060405180830381855af49150503d8060008114610d4e576040519150601f19603f3d011682016040523d82523d6000602084013e610d53565b606091505b5091509150610d6486838387610d7d565b9695505050505050565b6001600160a01b03163b151590565b60608315610dea578251600003610de357610d9785610d6e565b610de35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ae565b5081610df4565b610df48383610dfc565b949350505050565b815115610e0c5781518083602001fd5b8060405162461bcd60e51b81526004016107ae9190610fe1565b600060208284031215610e3857600080fd5b81356001600160e01b031981168114610aa857600080fd5b600060208284031215610e6257600080fd5b5035919050565b80356001600160a01b0381168114610e8057600080fd5b919050565b60008060408385031215610e9857600080fd5b82359150610ea860208401610e69565b90509250929050565b600060208284031215610ec357600080fd5b610aa882610e69565b600080600060408486031215610ee157600080fd5b610eea84610e69565b925060208401356001600160401b0380821115610f0657600080fd5b818601915086601f830112610f1a57600080fd5b813581811115610f2957600080fd5b876020828501011115610f3b57600080fd5b6020830194508093505050509250925092565b60005b83811015610f69578181015183820152602001610f51565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351610fa4816017850160208801610f4e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610fd5816028840160208801610f4e565b01602801949350505050565b6020815260008251806020840152611000816040850160208701610f4e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761070657610706611014565b8082018082111561070657610706611014565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161108f5761108f611014565b506000190190565b600082516110a9818460208701610f4e565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209d22eb3879844024ac3a2f642aef0822c433b95452fabee0765769624e203f3e64736f6c63430008130033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649ee4359a3a0b64f24b47429e9cf46a0dd5a98d2d9170e45b50859df9fca9913d077c6dc895847ccdbc655db399eacb5db402ee3572d3ce713a8b914861e67936a26469706673582212201003dfe7fc2b7f6e0ebe9afc430f398dc2d98c25f95a79cce45b7045480bf85d64736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200011e5760003560e01c806301ffc9a7146200012357806307d3277f146200014f578063158ef93e14620001795780631a1c6e5314620001875780631c0bdcfe14620001aa5780631f65940f14620001ef5780632369cfd6146200021e578063248a9ca314620002375780632f2ff15d146200025d57806336568abe146200027457806344d00f82146200028b5780634690484014620002a45780637ebef52914620002be5780638c64ea4a14620002d557806391d1485414620002ec578063a217fddf1462000303578063c5548074146200030c578063cee0c7ca1462000323578063d547741f1462000337578063ddce2acc146200034e578063fd967f471462000365575b600080fd5b6200013a6200013436600462000cf7565b6200036f565b60405190151581526020015b60405180910390f35b6001546040805161ffff83168152620100009092046001600160a01b031660208301520162000146565b6005546200013a9060ff1681565b600154620001969061ffff1681565b60405161ffff909116815260200162000146565b620001d6620001bb36600462000d40565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200162000146565b620001d66200020036600462000d40565b6001600160a01b039081166000908152600460205260409020541690565b620002356200022f36600462000d40565b620003a7565b005b6200024e6200024836600462000d5e565b62000445565b60405190815260200162000146565b620002356200026e36600462000d78565b6200045a565b620002356200028536600462000d78565b62000481565b6200029562000507565b60405162000146919062000da7565b600154620001d6906201000090046001600160a01b031681565b62000235620002cf36600462000e09565b6200056b565b620001d6620002e636600462000d5e565b620006ab565b6200013a620002fd36600462000d78565b620006d6565b6200024e600081565b620002356200031d36600462000e53565b620006ff565b600254620001d6906001600160a01b031681565b620002356200034836600462000d78565b620007b7565b620001d66200035f36600462000ecd565b620007d9565b6200019661271081565b60006001600160e01b03198216637965db0b60e01b1480620003a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000620003b481620009b3565b6001600160a01b038216620003dc5760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b038084169116036200040b576040516335db9d3d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384169081179091556040516000805160206200286883398151915290600090a25050565b60009081526020819052604090206001015490565b620004658262000445565b6200047081620009b3565b6200047c8383620009c2565b505050565b6001600160a01b0381163314620004f75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b62000503828262000a4a565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200056157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000542575b5050505050905090565b60006200057881620009b3565b60055460ff161515600103620005a05760405162dc149f60e41b815260040160405180910390fd5b6001600160a01b0384161580620005be57506001600160a01b038316155b15620005dd5760405163d92e233d60e01b815260040160405180910390fd5b61271061ffff831611156200060557604051637a50132760e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b03868116918217909255600180546001600160b01b031916620100009387169390930261ffff19169290921761ffff8516179091556040516000805160206200286883398151915290600090a260405161ffff831681526001600160a01b03841690600080516020620028888339815191529060200160405180910390a250506005805460ff191660011790555050565b60038181548110620006bc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006200070c81620009b3565b6001600160a01b038316620007345760405163d92e233d60e01b815260040160405180910390fd5b61271061ffff831611156200075c57604051637a50132760e11b815260040160405180910390fd5b600180546001600160b01b031916620100006001600160a01b03861690810261ffff19169190911761ffff851690811790925560405191825290600080516020620028888339815191529060200160405180910390a2505050565b620007c28262000445565b620007cd81620009b3565b6200047c838362000a4a565b600080620007e781620009b3565b6002546040805160008082526020820192839052926001600160a01b031691620008119062000ce9565b6200081e9291906200100a565b604051809103906000f0801580156200083b573d6000803e3d6000fd5b5060405162c981f560e11b81529091506001600160a01b0382169063019303ea906200087c908f908f908f908f908f908f908f908f908f9060040162001061565b600060405180830381600087803b1580156200089757600080fd5b505af1158015620008ac573d6000803e3d6000fd5b505050506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055503360046000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846001600160a01b03168a6001600160a01b0316826001600160a01b03167f86b4fabe6653dc170f81aafb968bb2c0c841411b628f39a0987776d445bc2cd48f8d8d8d8d8c6040516200099c96959493929190620010cc565b60405180910390a49b9a5050505050505050505050565b620009bf813362000ab2565b50565b620009ce8282620006d6565b62000503576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000a063390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62000a568282620006d6565b1562000503576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b62000abe8282620006d6565b620005035762000ace8162000b16565b62000adb83602062000b29565b60405160200162000aee9291906200111f565b60408051601f198184030181529082905262461bcd60e51b8252620004ee9160040162001192565b6060620003a16001600160a01b03831660145b6060600062000b3a836002620011bd565b62000b47906002620011d7565b6001600160401b0381111562000b615762000b6162000fa0565b6040519080825280601f01601f19166020018201604052801562000b8c576020820181803683370190505b509050600360fc1b8160008151811062000baa5762000baa620011ed565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000bdc5762000bdc620011ed565b60200101906001600160f81b031916908160001a905350600062000c02846002620011bd565b62000c0f906001620011d7565b90505b600181111562000c91576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000c475762000c47620011ed565b1a60f81b82828151811062000c605762000c60620011ed565b60200101906001600160f81b031916908160001a90535060049490941c9362000c898162001203565b905062000c12565b50831562000ce25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620004ee565b9392505050565b61164a806200121e83390190565b60006020828403121562000d0a57600080fd5b81356001600160e01b03198116811462000ce257600080fd5b80356001600160a01b038116811462000d3b57600080fd5b919050565b60006020828403121562000d5357600080fd5b62000ce28262000d23565b60006020828403121562000d7157600080fd5b5035919050565b6000806040838503121562000d8c57600080fd5b8235915062000d9e6020840162000d23565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101562000dea5783516001600160a01b03168352928401929184019160010162000dc3565b50909695505050505050565b803561ffff8116811462000d3b57600080fd5b60008060006060848603121562000e1f57600080fd5b62000e2a8462000d23565b925062000e3a6020850162000d23565b915062000e4a6040850162000df6565b90509250925092565b6000806040838503121562000e6757600080fd5b62000e728362000d23565b915062000d9e6020840162000df6565b60008083601f84011262000e9557600080fd5b5081356001600160401b0381111562000ead57600080fd5b60208301915083602082850101111562000ec657600080fd5b9250929050565b600080600080600080600080600060e08a8c03121562000eec57600080fd5b893563ffffffff8116811462000f0157600080fd5b985060208a0135975062000f1860408b0162000d23565b965060608a01356001600160401b038082111562000f3557600080fd5b62000f438d838e0162000e82565b909850965060808c013591508082111562000f5d57600080fd5b5062000f6c8c828d0162000e82565b909550935062000f81905060a08b0162000d23565b915062000f9160c08b0162000d23565b90509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000fd357818101518382015260200162000fb9565b50506000910152565b6000815180845262000ff681602086016020860162000fb6565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090620010309083018462000fdc565b949350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b63ffffffff8a168152886020820152600060018060a01b03808a16604084015260e060608401526200109860e08401898b62001038565b8381036080850152620010ad81888a62001038565b95821660a0850152509290921660c09091015250979650505050505050565b63ffffffff87168152608060208201526000620010ee60808301878962001038565b82810360408401526200110381868862001038565b91505060018060a01b0383166060830152979650505050505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516200115381601785016020880162000fb6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200118681602884016020880162000fb6565b01602801949350505050565b60208152600062000ce2602083018462000fdc565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620003a157620003a1620011a7565b80820180821115620003a157620003a1620011a7565b634e487b7160e01b600052603260045260246000fd5b600081620012155762001215620011a7565b50600019019056fe60806040526040516200164a3803806200164a8339810160408190526200002691620003b5565b60018055620000376000336200004d565b6200004582826000620000ee565b5050620004e3565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000ea576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000a93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b620000f98362000120565b600082511180620001075750805b156200011b5762000119838362000162565b505b505050565b6200012b8162000191565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200018a8383604051806060016040528060278152602001620016236027913962000245565b9392505050565b6001600160a01b0381163b620002045760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080856001600160a01b03168560405162000264919062000490565b600060405180830381855af49150503d8060008114620002a1576040519150601f19603f3d011682016040523d82523d6000602084013e620002a6565b606091505b509092509050620002ba86838387620002c4565b9695505050505050565b606083156200033857825160000362000330576001600160a01b0385163b620003305760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620001fb565b508162000344565b6200034483836200034c565b949350505050565b8151156200035d5781518083602001fd5b8060405162461bcd60e51b8152600401620001fb9190620004ae565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003ac57818101518382015260200162000392565b50506000910152565b60008060408385031215620003c957600080fd5b82516001600160a01b0381168114620003e157600080fd5b60208401519092506001600160401b0380821115620003ff57600080fd5b818501915085601f8301126200041457600080fd5b81518181111562000429576200042962000379565b604051601f8201601f19908116603f0116810190838211818310171562000454576200045462000379565b816040528281528860208487010111156200046e57600080fd5b620004818360208301602088016200038f565b80955050505050509250929050565b60008251620004a48184602087016200038f565b9190910192915050565b6020815260008251806020840152620004cf8160408501602087016200038f565b601f01601f19169190910160400192915050565b61113080620004f36000396000f3fe6080604052600436106101ae5760003560e01c806301ffc9a7146101c557806303dcd12c146101fa5780630835a3fc1461023c5780630952864e14610252578063158ef93e1461026857806316d3bfbb14610289578063248a9ca3146102a15780632d632692146102c15780632f2ff15d146102d757806336568abe146102f757806336fba0841461031757806339ebf823146103305780633f7b5e40146103925780633fe3347a146103a75780634d4bb197146103bd5780634fb3ccc5146103f15780635141eebb146104295780637ecebe001461043f5780638afca8f01461046c578063919860031461048257806391d14854146104a25780639aa7df94146104c25780639e34e348146104d85780639fc2c476146104f8578063a217fddf1461052c578063ab5b4d4914610541578063bbe4eb4914610575578063c0993eea14610596578063c45a0155146105ca578063c6d93f4a146105ea578063d547741f1461060a578063ecf708581461062a578063f828f50b14610640578063fc0e74d114610656578063fc7b9c1814610677578063fd967f471461068d578063ff1e7f08146106a3576101bd565b366101bd576101bb6106c3565b005b6101bb6106c3565b3480156101d157600080fd5b506101e56101e0366004610e26565b6106d5565b60405190151581526020015b60405180910390f35b34801561020657600080fd5b5061022e7f633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab81565b6040519081526020016101f1565b34801561024857600080fd5b5061022e60055481565b34801561025e57600080fd5b5061022e60075481565b34801561027457600080fd5b506010546101e590600160b01b900460ff1681565b34801561029557600080fd5b5061022e6301e1855881565b3480156102ad57600080fd5b5061022e6102bc366004610e50565b61070c565b3480156102cd57600080fd5b5061022e60085481565b3480156102e357600080fd5b506101bb6102f2366004610e85565b610721565b34801561030357600080fd5b506101bb610312366004610e85565b610742565b34801561032357600080fd5b5061022e64e8d4a5100081565b34801561033c57600080fd5b5061037261034b366004610eb1565b60146020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016101f1565b34801561039e57600080fd5b5061022e600a81565b3480156103b357600080fd5b5061022e600b5481565b3480156103c957600080fd5b5061022e7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b3480156103fd57600080fd5b50600c54610411906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b34801561043557600080fd5b5061022e60095481565b34801561044b57600080fd5b5061022e61045a366004610eb1565b60176020526000908152604090205481565b34801561047857600080fd5b5061022e600a5481565b34801561048e57600080fd5b50600e54610411906001600160a01b031681565b3480156104ae57600080fd5b506101e56104bd366004610e85565b6107c5565b3480156104ce57600080fd5b5061022e60045481565b3480156104e457600080fd5b50600d54610411906001600160a01b031681565b34801561050457600080fd5b5061022e7f1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae81565b34801561053857600080fd5b5061022e600081565b34801561054d57600080fd5b5061022e7f900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db2135737581565b34801561058157600080fd5b506010546101e590600160a01b900460ff1681565b3480156105a257600080fd5b5061022e7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b3480156105d657600080fd5b50600f54610411906001600160a01b031681565b3480156105f657600080fd5b506101bb610605366004610ecc565b6107ee565b34801561061657600080fd5b506101bb610625366004610e85565b61083f565b34801561063657600080fd5b5061022e60065481565b34801561064c57600080fd5b5061022e60025481565b34801561066257600080fd5b506010546101e590600160a81b900460ff1681565b34801561068357600080fd5b5061022e60035481565b34801561069957600080fd5b5061022e61271081565b3480156106af57600080fd5b506104116106be366004610e50565b61085b565b6106d36106ce610885565b6108ab565b565b60006001600160e01b03198216637965db0b60e01b148061070657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526020819052604090206001015490565b61072a8261070c565b610733816108cf565b61073d83836108dc565b505050565b6001600160a01b03811633146107b75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107c18282610960565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107f9816108cf565b6108398484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506109c5915050565b50505050565b6108488261070c565b610851816108cf565b61073d8383610960565b6013818154811061086b57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006108a66000805160206110b4833981519152546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156108ca573d6000f35b3d6000fd5b6108d981336109ea565b50565b6108e682826107c5565b6107c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561091c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61096a82826107c5565b156107c1576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6109ce83610a43565b6000825111806109db5750805b1561073d576108398383610a83565b6109f482826107c5565b6107c157610a0181610aaf565b610a0c836020610ac1565b604051602001610a1d929190610f72565b60408051601f198184030181529082905262461bcd60e51b82526107ae91600401610fe1565b610a4c81610c5c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610aa883836040518060600160405280602781526020016110d460279139610cf6565b9392505050565b60606107066001600160a01b03831660145b60606000610ad083600261102a565b610adb906002611041565b6001600160401b03811115610af257610af2611054565b6040519080825280601f01601f191660200182016040528015610b1c576020820181803683370190505b509050600360fc1b81600081518110610b3757610b3761106a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b6657610b6661106a565b60200101906001600160f81b031916908160001a9053506000610b8a84600261102a565b610b95906001611041565b90505b6001811115610c0d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610bc957610bc961106a565b1a60f81b828281518110610bdf57610bdf61106a565b60200101906001600160f81b031916908160001a90535060049490941c93610c0681611080565b9050610b98565b508315610aa85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ae565b610c6581610d6e565b610cc75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107ae565b6000805160206110b483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080856001600160a01b031685604051610d139190611097565b600060405180830381855af49150503d8060008114610d4e576040519150601f19603f3d011682016040523d82523d6000602084013e610d53565b606091505b5091509150610d6486838387610d7d565b9695505050505050565b6001600160a01b03163b151590565b60608315610dea578251600003610de357610d9785610d6e565b610de35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ae565b5081610df4565b610df48383610dfc565b949350505050565b815115610e0c5781518083602001fd5b8060405162461bcd60e51b81526004016107ae9190610fe1565b600060208284031215610e3857600080fd5b81356001600160e01b031981168114610aa857600080fd5b600060208284031215610e6257600080fd5b5035919050565b80356001600160a01b0381168114610e8057600080fd5b919050565b60008060408385031215610e9857600080fd5b82359150610ea860208401610e69565b90509250929050565b600060208284031215610ec357600080fd5b610aa882610e69565b600080600060408486031215610ee157600080fd5b610eea84610e69565b925060208401356001600160401b0380821115610f0657600080fd5b818601915086601f830112610f1a57600080fd5b813581811115610f2957600080fd5b876020828501011115610f3b57600080fd5b6020830194508093505050509250925092565b60005b83811015610f69578181015183820152602001610f51565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351610fa4816017850160208801610f4e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610fd5816028840160208801610f4e565b01602801949350505050565b6020815260008251806020840152611000816040850160208701610f4e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761070657610706611014565b8082018082111561070657610706611014565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161108f5761108f611014565b506000190190565b600082516110a9818460208701610f4e565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209d22eb3879844024ac3a2f642aef0822c433b95452fabee0765769624e203f3e64736f6c63430008130033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649ee4359a3a0b64f24b47429e9cf46a0dd5a98d2d9170e45b50859df9fca9913d077c6dc895847ccdbc655db399eacb5db402ee3572d3ce713a8b914861e67936a26469706673582212201003dfe7fc2b7f6e0ebe9afc430f398dc2d98c25f95a79cce45b7045480bf85d64736f6c63430008130033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialized()": {
        "notice": "Initialized state of the factory."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5367,
        "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
        "label": "feeBPS",
        "offset": 0,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 5369,
        "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
        "label": "feeRecipient",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5371,
        "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
        "label": "vaultPackage",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5374,
        "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
        "label": "vaults",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5378,
        "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
        "label": "vaultCreators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5381,
        "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
        "label": "initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/factory/packages/FactoryPackage.sol:FactoryPackage",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}