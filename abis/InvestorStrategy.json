{
  "address": "0x02badDc3231786B6f1B28035560781362c3d9CD6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tokenizedStrategyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableDepositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableWithdrawLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deployFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "freeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAndReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investor",
      "outputs": [
        {
          "internalType": "contract IInvestor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "shutdownWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalIdle",
          "type": "uint256"
        }
      ],
      "name": "tendThis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tendTrigger",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenizedStrategyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x011571e3d0c26db782b41005756baf8c883d59652abea55f6bddf521e39048fb",
  "receipt": {
    "to": null,
    "from": "0x594D425a6C9249F66a00C841A7a2A921b63a0a4C",
    "contractAddress": "0x02badDc3231786B6f1B28035560781362c3d9CD6",
    "transactionIndex": 11,
    "gasUsed": "752345",
    "logsBloom": "0x
    "blockHash": "0xf4d14e25fbf7e1237013f2668a2196600b630ad519b9c36406f6bead42c8cea5",
    "transactionHash": "0x011571e3d0c26db782b41005756baf8c883d59652abea55f6bddf521e39048fb",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 72771156,
        "transactionHash": "0x011571e3d0c26db782b41005756baf8c883d59652abea55f6bddf521e39048fb",
        "address": "0x02badDc3231786B6f1B28035560781362c3d9CD6",
        "topics": [
          "0xfb1616746b8474b6b7c67f2fe5ada156ed24774d0efe8bfe529cf537ba173330",
          "0x00000000000000000000000002baddc3231786b6f1b28035560781362c3d9cd6",
          "0x00000000000000000000000049d3f7543335cf38fa10889ccff10207e22110b5"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000",
        "logIndex": 35,
        "blockHash": "0xf4d14e25fbf7e1237013f2668a2196600b630ad519b9c36406f6bead42c8cea5"
      }
    ],
    "blockNumber": 72771156,
    "cumulativeGasUsed": "43341915",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4d4b6237CA7CD8Ce3376517Aed54Ba2734c8a520",
    "0x49d3f7543335cf38Fa10889CCFF10207e22110B5",
    "FXD: Direct Incentive - Educational Strategy 1",
    "0x21B5a34F8ae0387f247E9b01bA1B5c5B8A48971F"
  ],
  "numDeployments": 1,
  "solcInputHash": "f7419bef3f7b79b6be045b705fb06756",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenizedStrategyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deployFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investor\",\"outputs\":[{\"internalType\":\"contract IInvestor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"shutdownWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalIdle\",\"type\":\"uint256\"}],\"name\":\"tendThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenizedStrategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableDepositLimit(address)\":{\"details\":\"Defaults to an unlimited amount for any address. But can be overridden by strategists. This function will be called before any deposit or mints to enforce any limits desired by the strategist. This can be used for either a traditional deposit limit or for implementing a whitelist etc.   EX:      if(isAllowed[_owner]) return super.availableDepositLimit(_owner); This does not need to take into account any conversion rates from shares to assets. But should know that any non max uint256 amounts may be converted to shares. So it is recommended to keep custom amounts low enough as not to cause overflow when multiplied by `totalSupply`.\",\"params\":{\"\":\". The address that is depositing into the strategy.\"},\"returns\":{\"_0\":\". The available amount the `_owner` can deposit in terms of `asset`\"}},\"availableWithdrawLimit(address)\":{\"details\":\"Defaults to an unlimited amount for any address. But can be overridden by strategists. This function will be called before any withdraw or redeem to enforce any limits desired by the strategist. This can be used for illiquid or sandwichable strategies. It should never be lower than `totalIdle`.   EX:       return TokenIzedStrategy.totalIdle(); This does not need to take into account the `_owner`'s share balance or conversion rates from shares to assets.\",\"params\":{\"\":\". The address that is withdrawing from the strategy.\"},\"returns\":{\"_0\":\". The available amount that can be withdrawn in terms of `asset`\"}},\"deployFunds(uint256)\":{\"details\":\"Callback for the TokenizedStrategy to call during a {deposit} or {mint} to tell the strategy it can deploy funds. Since this can only be called after a {deposit} or {mint} delegateCall to the TokenizedStrategy msg.sender == address(this). Unless a whitelist is implemented this will be entirely permissionless and thus can be sandwiched or otherwise manipulated.\",\"params\":{\"_amount\":\"The amount of 'asset' that the strategy should attempt to deposit in the yield source.\"}},\"freeFunds(uint256)\":{\"details\":\"Callback for the TokenizedStrategy to call during a withdraw or redeem to free the needed funds to service the withdraw. This can only be called after a 'withdraw' or 'redeem' delegateCall to the TokenizedStrategy so msg.sender == address(this).\",\"params\":{\"_amount\":\"The amount of 'asset' that the strategy should attempt to free up.\"}},\"harvestAndReport()\":{\"details\":\"Callback for the TokenizedStrategy to call during a report to get an accurate accounting of assets the strategy controls. This can only be called after a report() delegateCall to the TokenizedStrategy so msg.sender == address(this).\",\"returns\":{\"_0\":\". A trusted and accurate account for the total amount of 'asset' the strategy currently holds including idle funds.\"}},\"shutdownWithdraw(uint256)\":{\"details\":\"Callback for the TokenizedStrategy during an emergency withdraw. This can only be called after a emergencyWithdraw() delegateCall to the TokenizedStrategy so msg.sender == address(this). We name the function `shutdownWithdraw` so that `emergencyWithdraw` calls are forwarded to the TokenizedStrategy so it can do the necessary accounting after the withdraw.\",\"params\":{\"_amount\":\"The amount of asset to attempt to free.\"}},\"tendThis(uint256)\":{\"details\":\"Callback for the TokenizedStrategy to initiate a _tend call in the strategy. This can only be called after a tend() delegateCall to the TokenizedStrategy so msg.sender == address(this). We name the function `tendThis` so that `tend` calls are forwarded to the TokenizedStrategy so it can do the necessary accounting.\",\"params\":{\"_totalIdle\":\"The amount of current idle funds that can be deployed during the tend\"}},\"tendTrigger()\":{\"returns\":{\"_0\":\". Should return true if tend() should be called by keeper or false if not.\",\"_1\":\". Calldata for the tend call.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableDepositLimit(address)\":{\"notice\":\"Gets the max amount of `asset` that an address can deposit.\"},\"availableWithdrawLimit(address)\":{\"notice\":\"Gets the max amount of `asset` that can be withdrawn.\"},\"deployFunds(uint256)\":{\"notice\":\"Should deploy up to '_amount' of 'asset' in yield source.\"},\"freeFunds(uint256)\":{\"notice\":\"Will attempt to free the '_amount' of 'asset'.\"},\"harvestAndReport()\":{\"notice\":\"Returns the accurate amount of all funds currently held by the Strategy.\"},\"shutdownWithdraw(uint256)\":{\"notice\":\"Will call the internal '_emergencyWithdraw' function.\"},\"tendThis(uint256)\":{\"notice\":\"Will call the internal '_tend' when a keeper tends the strategy.\"},\"tendTrigger()\":{\"notice\":\"Returns if tend() should be called by a keeper.\"},\"tokenizedStrategyAddress()\":{\"notice\":\"This is the address of the TokenizedStrategy implementation contract that will be used by all strategies to handle the accounting, logic, storage etc. Any external calls to the that don't hit one of the functions defined in this base or the strategy will end up being forwarded through the fallback function, which will delegateCall this address. This address should be the same for every strategy, never be adjusted and always be checked before any integration with the Strategy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategy/InvestorStrategy.sol\":\"InvestorStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x5a173dcd1c1f0074e4df6a9cdab3257e17f2e64f7b8f30ca9e17a8c5ea250e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\",\"keccak256\":\"0xc7134e0f63b0adcee02bf4b15efb2d0d4b1c03ae0d127dc90d846da4cab23a76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/strategy/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Modified Copyright Fathom 2023\\n// Original Copyright Yearn.finance\\npragma solidity 0.8.19;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// TokenizedStrategy interface used for internal view delegateCalls.\\nimport { ITokenizedStrategy } from \\\"./interfaces/ITokenizedStrategy.sol\\\";\\n\\n/**\\n * @title Fathom Base Strategy\\n * @author Fathom.fi\\n * @notice\\n *  BaseStrategy implements all of the required functionality to\\n *  seamlessly integrate with the `TokenizedStrategy` implementation contract\\n *  allowing anyone to easily build a fully permissionless ERC-4626 compliant\\n *  Vault by inheriting this contract and overriding three simple functions.\\n\\n *  It utilizes an immutable proxy pattern that allows the BaseStrategy\\n *  to remain simple and small. All standard logic is held within the\\n *  `TokenizedStrategy` and is reused over any n strategies all using the\\n *  `fallback` function to delegatecall the implementation so that strategists\\n *  can only be concerned with writing their strategy specific code.\\n *\\n *  This contract should be inherited and the three main abstract methods\\n *  `_deployFunds`, `_freeFunds` and `_harvestAndReport` implemented to adapt\\n *  the Strategy to the particular needs it has to generate yield. There are\\n *  other optional methods that can be implemented to further customize\\n *  the strategy if desired.\\n *\\n *  All default storage for the strategy is controlled and updated by the\\n *  `TokenizedStrategy`. The implementation holds a storage struct that\\n *  contains all needed global variables in a manual storage slot. This\\n *  means strategists can feel free to implement their own custom storage\\n *  variables as they need with no concern of collisions. All global variables\\n *  can be viewed within the Strategy by a simple call using the\\n *  `TokenizedStrategy` variable. IE: TokenizedStrategy.globalVariable();.\\n */\\n// solhint-disable\\nabstract contract BaseStrategy {\\n    /*//////////////////////////////////////////////////////////////\\n                            MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n    /**\\n     * @dev Used on TokenizedStrategy callback functions to make sure it is post\\n     * a delegateCall from this address to the TokenizedStrategy.\\n     */\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"!self\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Use to assure that the call is coming from the strategies management.\\n     */\\n    modifier onlyManagement() {\\n        TokenizedStrategy.isManagement(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Use to assure that the call is coming from either the strategies\\n     * management or the keeper.\\n     */\\n    modifier onlyKeepers() {\\n        TokenizedStrategy.isKeeperOrManagement(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Use to assure that the call is coming from either the strategies\\n     * management or the emergency admin.\\n     */\\n    modifier onlyEmergencyAuthorized() {\\n        TokenizedStrategy.isEmergencyAuthorized(msg.sender);\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * This is the address of the TokenizedStrategy implementation\\n     * contract that will be used by all strategies to handle the\\n     * accounting, logic, storage etc.\\n     *\\n     * Any external calls to the that don't hit one of the functions\\n     * defined in this base or the strategy will end up being forwarded\\n     * through the fallback function, which will delegateCall this address.\\n     *\\n     * This address should be the same for every strategy, never be adjusted\\n     * and always be checked before any integration with the Strategy.\\n     */\\n    // NOTE: This is a holder address based on expected deterministic location for testing\\n    address public immutable tokenizedStrategyAddress;\\n\\n    /**\\n     * This variable is set to address(this) during initialization of each strategy.\\n     *\\n     * This can be used to retrieve storage data within the strategy\\n     * contract as if it were a linked library.\\n     *\\n     *       i.e. uint256 totalAssets = TokenizedStrategy.totalAssets()\\n     *\\n     * Using address(this) will mean any calls using this variable will lead\\n     * to a call to itself. Which will hit the fallback function and\\n     * delegateCall that to the actual TokenizedStrategy.\\n     */\\n    ITokenizedStrategy internal immutable TokenizedStrategy;\\n\\n    // Underlying asset the Strategy is earning yield on.\\n    // Stored here for cheap retrievals within the strategy.\\n    ERC20 internal immutable asset;\\n\\n    /**\\n     * @notice Used to initialize the strategy on deployment.\\n     *\\n     * This will set the `TokenizedStrategy` variable for easy\\n     * internal view calls to the implementation. As well as\\n     * initializing the default storage variables based on the\\n     * parameters and using the deployer for the permissioned roles.\\n     *\\n     * @param _asset Address of the underlying asset.\\n     * @param _name Name the strategy will use.\\n     */\\n    constructor(address _asset, string memory _name, address _tokenizedStrategyAddress) {\\n        asset = ERC20(_asset);\\n        tokenizedStrategyAddress = _tokenizedStrategyAddress;\\n\\n        // Set instance of the implementation for internal use.\\n        TokenizedStrategy = ITokenizedStrategy(address(this));\\n\\n        // Initialize the strategy's storage variables.\\n        _delegateCall(abi.encodeCall(ITokenizedStrategy.init, (_asset, _name, msg.sender, msg.sender, msg.sender)));\\n\\n        // Store the tokenizedStrategyAddress at the standard implementation\\n        // address storage slot so etherscan picks up the interface. This gets\\n        // stored on initialization and never updated.\\n        assembly {\\n            sstore(\\n                // keccak256('eip1967.proxy.implementation' - 1)\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\\n                _tokenizedStrategyAddress\\n            )\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                NEEDED TO BE OVERRIDDEN BY STRATEGIST\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Should deploy up to '_amount' of 'asset' in the yield source.\\n     *\\n     * This function is called at the end of a {deposit} or {mint}\\n     * call. Meaning that unless a whitelist is implemented it will\\n     * be entirely permissionless and thus can be sandwiched or otherwise\\n     * manipulated.\\n     *\\n     * @param _amount The amount of 'asset' that the strategy should attempt\\n     * to deposit in the yield source.\\n     */\\n    function _deployFunds(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @dev Will attempt to free the '_amount' of 'asset'.\\n     *\\n     * The amount of 'asset' that is already loose has already\\n     * been accounted for.\\n     *\\n     * This function is called during {withdraw} and {redeem} calls.\\n     * Meaning that unless a whitelist is implemented it will be\\n     * entirely permissionless and thus can be sandwiched or otherwise\\n     * manipulated.\\n     *\\n     * Should not rely on asset.balanceOf(address(this)) calls other than\\n     * for diff accounting purposes.\\n     *\\n     * Any difference between `_amount` and what is actually freed will be\\n     * counted as a loss and passed on to the withdrawer. This means\\n     * care should be taken in times of illiquidity. It may be better to revert\\n     * if withdraws are simply illiquid so not to realize incorrect losses.\\n     *\\n     * @param _amount, The amount of 'asset' to be freed.\\n     */\\n    function _freeFunds(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @dev Internal function to harvest all rewards, redeploy any idle\\n     * funds and return an accurate accounting of all funds currently\\n     * held by the Strategy.\\n     *\\n     * This should do any needed harvesting, rewards selling, accrual,\\n     * redepositing etc. to get the most accurate view of current assets.\\n     *\\n     * NOTE: All applicable assets including loose assets should be\\n     * accounted for in this function.\\n     *\\n     * Care should be taken when relying on oracles or swap values rather\\n     * than actual amounts as all Strategy profit/loss accounting will\\n     * be done based on this returned value.\\n     *\\n     * This can still be called post a shutdown, a strategist can check\\n     * `TokenizedStrategy.isShutdown()` to decide if funds should be\\n     * redeployed or simply realize any profits/losses.\\n     *\\n     * @return _totalAssets A trusted and accurate account for the total\\n     * amount of 'asset' the strategy currently holds including idle funds.\\n     */\\n    function _harvestAndReport() internal virtual returns (uint256 _totalAssets);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    OPTIONAL TO OVERRIDE BY STRATEGIST\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Optional function for strategist to override that can\\n     *  be called in between reports.\\n     *\\n     * If '_tend' is used tendTrigger() will also need to be overridden.\\n     *\\n     * This call can only be called by a permissioned role so may be\\n     * through protected relays.\\n     *\\n     * This can be used to harvest and compound rewards, deposit idle funds,\\n     * perform needed position maintenance or anything else that doesn't need\\n     * a full report for.\\n     *\\n     *   EX: A strategy that can not deposit funds without getting\\n     *       sandwiched can use the tend when a certain threshold\\n     *       of idle to totalAssets has been reached.\\n     *\\n     * The TokenizedStrategy contract will do all needed debt and idle updates\\n     * after this has finished and will have no effect on PPS of the strategy\\n     * till report() is called.\\n     *\\n     * @param _totalIdle The current amount of idle funds that are available to deploy.\\n     */\\n    function _tend(uint256 _totalIdle) internal virtual {}\\n\\n    /**\\n     * @dev Optional trigger to override if tend() will be used by the strategy.\\n     * This must be implemented if the strategy hopes to invoke _tend().\\n     *\\n     * @return . Should return true if tend() should be called by keeper or false if not.\\n     */\\n    function _tendTrigger() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns if tend() should be called by a keeper.\\n     *\\n     * @return . Should return true if tend() should be called by keeper or false if not.\\n     * @return . Calldata for the tend call.\\n     */\\n    function tendTrigger() external view virtual returns (bool, bytes memory) {\\n        return (\\n            // Return the status of the tend trigger.\\n            _tendTrigger(),\\n            // And the needed calldata either way.\\n            abi.encodeWithSelector(ITokenizedStrategy.tend.selector)\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the max amount of `asset` that an address can deposit.\\n     * @dev Defaults to an unlimited amount for any address. But can\\n     * be overridden by strategists.\\n     *\\n     * This function will be called before any deposit or mints to enforce\\n     * any limits desired by the strategist. This can be used for either a\\n     * traditional deposit limit or for implementing a whitelist etc.\\n     *\\n     *   EX:\\n     *      if(isAllowed[_owner]) return super.availableDepositLimit(_owner);\\n     *\\n     * This does not need to take into account any conversion rates\\n     * from shares to assets. But should know that any non max uint256\\n     * amounts may be converted to shares. So it is recommended to keep\\n     * custom amounts low enough as not to cause overflow when multiplied\\n     * by `totalSupply`.\\n     *\\n     * @param . The address that is depositing into the strategy.\\n     * @return . The available amount the `_owner` can deposit in terms of `asset`\\n     */\\n    function availableDepositLimit(address /*_owner*/) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice Gets the max amount of `asset` that can be withdrawn.\\n     * @dev Defaults to an unlimited amount for any address. But can\\n     * be overridden by strategists.\\n     *\\n     * This function will be called before any withdraw or redeem to enforce\\n     * any limits desired by the strategist. This can be used for illiquid\\n     * or sandwichable strategies. It should never be lower than `totalIdle`.\\n     *\\n     *   EX:\\n     *       return TokenIzedStrategy.totalIdle();\\n     *\\n     * This does not need to take into account the `_owner`'s share balance\\n     * or conversion rates from shares to assets.\\n     *\\n     * @param . The address that is withdrawing from the strategy.\\n     * @return . The available amount that can be withdrawn in terms of `asset`\\n     */\\n    function availableWithdrawLimit(address /*_owner*/) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @dev Optional function for a strategist to override that will\\n     * allow management to manually withdraw deployed funds from the\\n     * yield source if a strategy is shutdown.\\n     *\\n     * This should attempt to free `_amount`, noting that `_amount` may\\n     * be more than is currently deployed.\\n     *\\n     * NOTE: This will not realize any profits or losses. A separate\\n     * {report} will be needed in order to record any profit/loss. If\\n     * a report may need to be called after a shutdown it is important\\n     * to check if the strategy is shutdown during {_harvestAndReport}\\n     * so that it does not simply re-deploy all funds that had been freed.\\n     *\\n     * EX:\\n     *   if(freeAsset > 0 && !TokenizedStrategy.isShutdown()) {\\n     *       depositFunds...\\n     *    }\\n     *\\n     * @param _amount The amount of asset to attempt to free.\\n     */\\n    function _emergencyWithdraw(uint256 _amount) internal virtual {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        TokenizedStrategy HOOKS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Should deploy up to '_amount' of 'asset' in yield source.\\n     * @dev Callback for the TokenizedStrategy to call during a {deposit}\\n     * or {mint} to tell the strategy it can deploy funds.\\n     *\\n     * Since this can only be called after a {deposit} or {mint}\\n     * delegateCall to the TokenizedStrategy msg.sender == address(this).\\n     *\\n     * Unless a whitelist is implemented this will be entirely permissionless\\n     * and thus can be sandwiched or otherwise manipulated.\\n     *\\n     * @param _amount The amount of 'asset' that the strategy should\\n     * attempt to deposit in the yield source.\\n     */\\n    function deployFunds(uint256 _amount) external virtual onlySelf {\\n        _deployFunds(_amount);\\n    }\\n\\n    /**\\n     * @notice Will attempt to free the '_amount' of 'asset'.\\n     * @dev Callback for the TokenizedStrategy to call during a withdraw\\n     * or redeem to free the needed funds to service the withdraw.\\n     *\\n     * This can only be called after a 'withdraw' or 'redeem' delegateCall\\n     * to the TokenizedStrategy so msg.sender == address(this).\\n     *\\n     * @param _amount The amount of 'asset' that the strategy should attempt to free up.\\n     */\\n    function freeFunds(uint256 _amount) external virtual onlySelf {\\n        _freeFunds(_amount);\\n    }\\n\\n    /**\\n     * @notice Returns the accurate amount of all funds currently\\n     * held by the Strategy.\\n     * @dev Callback for the TokenizedStrategy to call during a report to\\n     * get an accurate accounting of assets the strategy controls.\\n     *\\n     * This can only be called after a report() delegateCall to the\\n     * TokenizedStrategy so msg.sender == address(this).\\n     *\\n     * @return . A trusted and accurate account for the total amount\\n     * of 'asset' the strategy currently holds including idle funds.\\n     */\\n    function harvestAndReport() external virtual onlySelf returns (uint256) {\\n        return _harvestAndReport();\\n    }\\n\\n    /**\\n     * @notice Will call the internal '_tend' when a keeper tends the strategy.\\n     * @dev Callback for the TokenizedStrategy to initiate a _tend call in the strategy.\\n     *\\n     * This can only be called after a tend() delegateCall to the TokenizedStrategy\\n     * so msg.sender == address(this).\\n     *\\n     * We name the function `tendThis` so that `tend` calls are forwarded to\\n     * the TokenizedStrategy so it can do the necessary accounting.\\n\\n     * @param _totalIdle The amount of current idle funds that can be\\n     * deployed during the tend\\n     */\\n    function tendThis(uint256 _totalIdle) external virtual onlySelf {\\n        _tend(_totalIdle);\\n    }\\n\\n    /**\\n     * @notice Will call the internal '_emergencyWithdraw' function.\\n     * @dev Callback for the TokenizedStrategy during an emergency withdraw.\\n     *\\n     * This can only be called after a emergencyWithdraw() delegateCall to\\n     * the TokenizedStrategy so msg.sender == address(this).\\n     *\\n     * We name the function `shutdownWithdraw` so that `emergencyWithdraw`\\n     * calls are forwarded to the TokenizedStrategy so it can do the necessary\\n     * accounting after the withdraw.\\n     *\\n     * @param _amount The amount of asset to attempt to free.\\n     */\\n    function shutdownWithdraw(uint256 _amount) external virtual onlySelf {\\n        _emergencyWithdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Function used to delegate call the TokenizedStrategy with\\n     * certain `_calldata` and return any return values.\\n     *\\n     * This is used to setup the initial storage of the strategy, and\\n     * can be used by strategist to forward any other call to the\\n     * TokenizedStrategy implementation.\\n     *\\n     * @param _calldata The abi encoded calldata to use in delegatecall.\\n     * @return . The return value if the call was successful in bytes.\\n     */\\n    function _delegateCall(bytes memory _calldata) internal returns (bytes memory) {\\n        // Delegate call the tokenized strategy with provided calldata.\\n        (bool success, bytes memory result) = tokenizedStrategyAddress.delegatecall(_calldata);\\n\\n        // If the call reverted. Return the error.\\n        if (!success) {\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize()\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n\\n        // Return the result.\\n        return result;\\n    }\\n\\n    // execute a function on the TokenizedStrategy and return any value.\\n    fallback() external {\\n        // load our target address\\n        address _tokenizedStrategyAddress = tokenizedStrategyAddress;\\n        // Execute external function using delegatecall and return any value.\\n        assembly {\\n            // Copy function selector and any arguments.\\n            calldatacopy(0, 0, calldatasize())\\n            // Execute function delegatecall.\\n            let result := delegatecall(gas(), _tokenizedStrategyAddress, 0, calldatasize(), 0, 0)\\n            // Get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // Return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6621723156459846c1fd4fd2201aec2dd7dc27590d3f5466385480bd27a166c\",\"license\":\"AGPL-3.0\"},\"contracts/strategy/InvestorStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\npragma solidity 0.8.19;\\n\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"./interfaces/IInvestor.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// solhint-disable\\ncontract InvestorStrategy is BaseStrategy {\\n    using SafeERC20 for ERC20;\\n\\n    IInvestor public immutable investor;\\n\\n    constructor(\\n        address _investor,\\n        address _asset,\\n        string memory _name,\\n        address _tokenizedStrategyAddress\\n    ) BaseStrategy(_asset, _name, _tokenizedStrategyAddress) {\\n        require(_investor != address(0), \\\"InvestorStrategy: zero address\\\");\\n        investor = IInvestor(_investor);\\n    }\\n\\n    function _harvestAndReport() internal override returns (uint256 _totalAssets) {\\n        investor.processReport();\\n        _totalAssets = asset.balanceOf(address(this));\\n    }\\n\\n    function availableDepositLimit(address /*_owner*/) public view override returns (uint256) {\\n        // Return the remaining room.\\n        return type(uint256).max - asset.balanceOf(address(this));\\n    }\\n\\n    function availableWithdrawLimit(address /*_owner*/) public view override returns (uint256) {\\n        return TokenizedStrategy.totalIdle();\\n    }\\n\\n    function _deployFunds(uint256 _amount) internal pure override {}\\n\\n    function _freeFunds(uint256 _amount) internal pure override {}\\n}\\n\",\"keccak256\":\"0xd121d8adaf7fcaa75e9f2def5f23b41130d8a239e0b22514c7b5bfd63658bb5a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/strategy/interfaces/IInvestor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\npragma solidity 0.8.19;\\n\\ninterface IInvestor {\\n    event DistributionSetup(uint256 amount, uint256 periodStart, uint256 periodEnd);\\n    event Report(uint256 timestamp, uint256 accruedRewards);\\n    event EmergencyWithdraw(uint256 timestamp, uint256 leftRewards);\\n    event StrategyUpdate(address oldStrategy, address newStrategy, address newStrategyAsset);\\n\\n    function setStrategy(address _strategy) external;\\n\\n    function setupDistribution(uint256 amount, uint256 periodStart, uint256 periodEnd) external;\\n\\n    function processReport() external returns (uint256);\\n\\n    function emergencyWithdraw() external returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function totalRewards() external view returns (uint256);\\n\\n    function distributedRewards() external view returns (uint256);\\n\\n    function rewardsLeft() external view returns (uint256);\\n\\n    function rewardsAccrued() external view returns (uint256);\\n\\n    function asset() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcdc1062511df46d63fffc2ee7c84070716bd6384b7e3c9c46ddc1b03666e2514\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/strategy/interfaces/ITokenizedStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Modified Copyright Fathom 2023\\n// Original Copyright Yearn.finance\\npragma solidity 0.8.19;\\n\\nimport { IERC4626 } from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n// Interface that implements the 4626 standard and the implementation functions\\n// solhint-disable\\ninterface ITokenizedStrategy is IERC4626, IERC20Permit {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event UpdatePendingManagement(address indexed newPendingManagement);\\n\\n    event UpdateManagement(address indexed newManagement);\\n\\n    event UpdateKeeper(address indexed newKeeper);\\n\\n    event UpdateEmergencyAdmin(address indexed newEmergencyAdmin);\\n\\n    event UpdatePerformanceFee(uint16 newPerformanceFee);\\n\\n    event UpdatePerformanceFeeRecipient(address indexed newPerformanceFeeRecipient);\\n\\n    event UpdateProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime);\\n\\n    event StrategyShutdown();\\n\\n    event Reported(uint256 profit, uint256 loss, uint256 protocolFees, uint256 performanceFees);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           INITIALIZATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function init(address _asset, string memory _name, address _management, address _performanceFeeRecipient, address _keeper) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    NON-STANDARD 4626 OPTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxLoss) external returns (uint256);\\n\\n    function redeem(uint256 shares, address receiver, address owner, uint256 maxLoss) external returns (uint256);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function isManagement(address _sender) external view returns (bool);\\n\\n    function isKeeperOrManagement(address _sender) external view returns (bool);\\n\\n    function isEmergencyAuthorized(address _sender) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        KEEPERS FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tend() external;\\n\\n    function report() external returns (uint256 _profit, uint256 _loss);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function MIN_FEE() external view returns (uint16);\\n\\n    function MAX_FEE() external view returns (uint16);\\n\\n    function FACTORY() external view returns (address);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            GETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function apiVersion() external view returns (string memory);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalIdle() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function management() external view returns (address);\\n\\n    function pendingManagement() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function emergencyAdmin() external view returns (address);\\n\\n    function performanceFee() external view returns (uint16);\\n\\n    function performanceFeeRecipient() external view returns (address);\\n\\n    function fullProfitUnlockDate() external view returns (uint256);\\n\\n    function profitUnlockingRate() external view returns (uint256);\\n\\n    function profitMaxUnlockTime() external view returns (uint256);\\n\\n    function lastReport() external view returns (uint256);\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function unlockedShares() external view returns (uint256);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            SETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setPendingManagement(address) external;\\n\\n    function acceptManagement() external;\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function setEmergencyAdmin(address _emergencyAdmin) external;\\n\\n    function setPerformanceFee(uint16 _performanceFee) external;\\n\\n    function setPerformanceFeeRecipient(address _performanceFeeRecipient) external;\\n\\n    function setProfitMaxUnlockTime(uint256 _profitMaxUnlockTime) external;\\n\\n    function shutdownStrategy() external;\\n\\n    function emergencyWithdraw(uint256 _amount) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           ERC20 ADD ONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfc09e98bcadcda5fc950da37050306e8dac6697108d6ac693d557e0a73026f8f\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161093738038061093783398101604081905261003091610203565b6001600160a01b0380841660c05281166080523060a05260405183908390839061009d9061006a90859085903390819081906024016102e4565b60408051601f198184030181529190526020810180516001600160e01b03908116632ecfe31560e01b1790915261013016565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550506001600160a01b03841661011c5760405162461bcd60e51b815260206004820152601e60248201527f496e766573746f7253747261746567793a207a65726f20616464726573730000604482015260640160405180910390fd5b5050506001600160a01b031660e052610359565b60606000806080516001600160a01b03168460405161014f919061033d565b600060405180830381855af49150503d806000811461018a576040519150601f19603f3d011682016040523d82523d6000602084013e61018f565b606091505b5091509150816101a6576040513d806000833e8082fd5b9392505050565b80516001600160a01b03811681146101c457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101fa5781810151838201526020016101e2565b50506000910152565b6000806000806080858703121561021957600080fd5b610222856101ad565b9350610230602086016101ad565b60408601519093506001600160401b038082111561024d57600080fd5b818701915087601f83011261026157600080fd5b815181811115610273576102736101c9565b604051601f8201601f19908116603f0116810190838211818310171561029b5761029b6101c9565b816040528281528a60208487010111156102b457600080fd5b6102c58360208301602088016101df565b80965050505050506102d9606086016101ad565b905092959194509250565b600060018060a01b03808816835260a0602084015286518060a08501526103128160c0860160208b016101df565b95811660408401529384166060830152509116608082015260c0601f909201601f1916010192915050565b6000825161034f8184602087016101df565b9190910192915050565b60805160a05160c05160e0516105916103a660003960008181610100015261033d01526000818161028901526103d7015260006101be0152600081816090015261019801526105916000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c806304bd4629146100d55780631e0018d6146100fb5780633d6cb5751461012f57806346aa2f121461014257806349317f1d14610155578063503160d91461012f5780635d265d3f1461015d5780639d7fb70c1461012f578063d19a3bb814610193578063fde813a81461012f575b7f00000000000000000000000000000000000000000000000000000000000000003660008037600080366000845af43d6000803e8080156100ce573d6000f35b3d6000fd5b005b6100e86100e336600461044d565b6101ba565b6040519081526020015b60405180910390f35b6101227f000000000000000000000000000000000000000000000000000000000000000081565b6040516100f2919061047d565b6100d361013d366004610491565b610244565b6100e861015036600461044d565b61026f565b6100e861030b565b60408051600481526024810182526020810180516001600160e01b031663440368a360e01b17905290516100f2916000916104aa565b6101227f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa7df946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561021a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023e9190610502565b92915050565b33301461026c5760405162461bcd60e51b81526004016102639061051b565b60405180910390fd5b50565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906102be90309060040161047d565b602060405180830381865afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610502565b61023e9060001961053a565b600033301461032c5760405162461bcd60e51b81526004016102639061051b565b610334610339565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529c21a06040518163ffffffff1660e01b81526004016020604051808303816000875af115801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf9190610502565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061040c90309060040161047d565b602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610502565b60006020828403121561045f57600080fd5b81356001600160a01b038116811461047657600080fd5b9392505050565b6001600160a01b0391909116815260200190565b6000602082840312156104a357600080fd5b5035919050565b821515815260006020604081840152835180604085015260005b818110156104e0578581018301518582016060015282016104c4565b506000606082860101526060601f19601f830116850101925050509392505050565b60006020828403121561051457600080fd5b5051919050565b60208082526005908201526410b9b2b63360d91b604082015260600190565b8181038181111561023e57634e487b7160e01b600052601160045260246000fdfea26469706673582212201c35c693e5dd8b28e3626ce49d3e1cd2943517759946720096277be2f673fecf64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061008e5760003560e01c806304bd4629146100d55780631e0018d6146100fb5780633d6cb5751461012f57806346aa2f121461014257806349317f1d14610155578063503160d91461012f5780635d265d3f1461015d5780639d7fb70c1461012f578063d19a3bb814610193578063fde813a81461012f575b7f00000000000000000000000000000000000000000000000000000000000000003660008037600080366000845af43d6000803e8080156100ce573d6000f35b3d6000fd5b005b6100e86100e336600461044d565b6101ba565b6040519081526020015b60405180910390f35b6101227f000000000000000000000000000000000000000000000000000000000000000081565b6040516100f2919061047d565b6100d361013d366004610491565b610244565b6100e861015036600461044d565b61026f565b6100e861030b565b60408051600481526024810182526020810180516001600160e01b031663440368a360e01b17905290516100f2916000916104aa565b6101227f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa7df946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561021a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023e9190610502565b92915050565b33301461026c5760405162461bcd60e51b81526004016102639061051b565b60405180910390fd5b50565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906102be90309060040161047d565b602060405180830381865afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610502565b61023e9060001961053a565b600033301461032c5760405162461bcd60e51b81526004016102639061051b565b610334610339565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529c21a06040518163ffffffff1660e01b81526004016020604051808303816000875af115801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf9190610502565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061040c90309060040161047d565b602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610502565b60006020828403121561045f57600080fd5b81356001600160a01b038116811461047657600080fd5b9392505050565b6001600160a01b0391909116815260200190565b6000602082840312156104a357600080fd5b5035919050565b821515815260006020604081840152835180604085015260005b818110156104e0578581018301518582016060015282016104c4565b506000606082860101526060601f19601f830116850101925050509392505050565b60006020828403121561051457600080fd5b5051919050565b60208082526005908201526410b9b2b63360d91b604082015260600190565b8181038181111561023e57634e487b7160e01b600052601160045260246000fdfea26469706673582212201c35c693e5dd8b28e3626ce49d3e1cd2943517759946720096277be2f673fecf64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableDepositLimit(address)": {
        "details": "Defaults to an unlimited amount for any address. But can be overridden by strategists. This function will be called before any deposit or mints to enforce any limits desired by the strategist. This can be used for either a traditional deposit limit or for implementing a whitelist etc.   EX:      if(isAllowed[_owner]) return super.availableDepositLimit(_owner); This does not need to take into account any conversion rates from shares to assets. But should know that any non max uint256 amounts may be converted to shares. So it is recommended to keep custom amounts low enough as not to cause overflow when multiplied by `totalSupply`.",
        "params": {
          "": ". The address that is depositing into the strategy."
        },
        "returns": {
          "_0": ". The available amount the `_owner` can deposit in terms of `asset`"
        }
      },
      "availableWithdrawLimit(address)": {
        "details": "Defaults to an unlimited amount for any address. But can be overridden by strategists. This function will be called before any withdraw or redeem to enforce any limits desired by the strategist. This can be used for illiquid or sandwichable strategies. It should never be lower than `totalIdle`.   EX:       return TokenIzedStrategy.totalIdle(); This does not need to take into account the `_owner`'s share balance or conversion rates from shares to assets.",
        "params": {
          "": ". The address that is withdrawing from the strategy."
        },
        "returns": {
          "_0": ". The available amount that can be withdrawn in terms of `asset`"
        }
      },
      "deployFunds(uint256)": {
        "details": "Callback for the TokenizedStrategy to call during a {deposit} or {mint} to tell the strategy it can deploy funds. Since this can only be called after a {deposit} or {mint} delegateCall to the TokenizedStrategy msg.sender == address(this). Unless a whitelist is implemented this will be entirely permissionless and thus can be sandwiched or otherwise manipulated.",
        "params": {
          "_amount": "The amount of 'asset' that the strategy should attempt to deposit in the yield source."
        }
      },
      "freeFunds(uint256)": {
        "details": "Callback for the TokenizedStrategy to call during a withdraw or redeem to free the needed funds to service the withdraw. This can only be called after a 'withdraw' or 'redeem' delegateCall to the TokenizedStrategy so msg.sender == address(this).",
        "params": {
          "_amount": "The amount of 'asset' that the strategy should attempt to free up."
        }
      },
      "harvestAndReport()": {
        "details": "Callback for the TokenizedStrategy to call during a report to get an accurate accounting of assets the strategy controls. This can only be called after a report() delegateCall to the TokenizedStrategy so msg.sender == address(this).",
        "returns": {
          "_0": ". A trusted and accurate account for the total amount of 'asset' the strategy currently holds including idle funds."
        }
      },
      "shutdownWithdraw(uint256)": {
        "details": "Callback for the TokenizedStrategy during an emergency withdraw. This can only be called after a emergencyWithdraw() delegateCall to the TokenizedStrategy so msg.sender == address(this). We name the function `shutdownWithdraw` so that `emergencyWithdraw` calls are forwarded to the TokenizedStrategy so it can do the necessary accounting after the withdraw.",
        "params": {
          "_amount": "The amount of asset to attempt to free."
        }
      },
      "tendThis(uint256)": {
        "details": "Callback for the TokenizedStrategy to initiate a _tend call in the strategy. This can only be called after a tend() delegateCall to the TokenizedStrategy so msg.sender == address(this). We name the function `tendThis` so that `tend` calls are forwarded to the TokenizedStrategy so it can do the necessary accounting.",
        "params": {
          "_totalIdle": "The amount of current idle funds that can be deployed during the tend"
        }
      },
      "tendTrigger()": {
        "returns": {
          "_0": ". Should return true if tend() should be called by keeper or false if not.",
          "_1": ". Calldata for the tend call."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "availableDepositLimit(address)": {
        "notice": "Gets the max amount of `asset` that an address can deposit."
      },
      "availableWithdrawLimit(address)": {
        "notice": "Gets the max amount of `asset` that can be withdrawn."
      },
      "deployFunds(uint256)": {
        "notice": "Should deploy up to '_amount' of 'asset' in yield source."
      },
      "freeFunds(uint256)": {
        "notice": "Will attempt to free the '_amount' of 'asset'."
      },
      "harvestAndReport()": {
        "notice": "Returns the accurate amount of all funds currently held by the Strategy."
      },
      "shutdownWithdraw(uint256)": {
        "notice": "Will call the internal '_emergencyWithdraw' function."
      },
      "tendThis(uint256)": {
        "notice": "Will call the internal '_tend' when a keeper tends the strategy."
      },
      "tendTrigger()": {
        "notice": "Returns if tend() should be called by a keeper."
      },
      "tokenizedStrategyAddress()": {
        "notice": "This is the address of the TokenizedStrategy implementation contract that will be used by all strategies to handle the accounting, logic, storage etc. Any external calls to the that don't hit one of the functions defined in this base or the strategy will end up being forwarded through the fallback function, which will delegateCall this address. This address should be the same for every strategy, never be adjusted and always be checked before any integration with the Strategy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}